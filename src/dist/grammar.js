// @generated by Peggy 5.0.3.
//
// https://peggyjs.org/


class peg$SyntaxError extends SyntaxError {
  constructor(message, expected, found, location) {
    super(message);
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";
  }

  format(sources) {
    let str = "Error: " + this.message;
    if (this.location) {
      let src = null;
      const st = sources.find(s => s.source === this.location.source);
      if (st) {
        src = st.text.split(/\r\n|\n|\r/g);
      }
      const s = this.location.start;
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
        ? this.location.source.offset(s)
        : s;
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
      if (src) {
        const e = this.location.end;
        const filler = "".padEnd(offset_s.line.toString().length, " ");
        const line = src[s.line - 1];
        const last = s.line === e.line ? e.column : line.length + 1;
        const hatLen = (last - s.column) || 1;
        str += "\n --> " + loc + "\n"
            + filler + " |\n"
            + offset_s.line + " | " + line + "\n"
            + filler + " | " + "".padEnd(s.column - 1, " ")
            + "".padEnd(hatLen, "^");
      } else {
        str += "\n at " + loc;
      }
    }
    return str;
  }

  static buildMessage(expected, found) {
    function hex(ch) {
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
      : null;
    function unicodeEscape(s) {
      if (nonPrintable) {
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
      return s;
    }

    function literalEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    function classEscape(s) {
      return unicodeEscape(s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return "\"" + literalEscape(expectation.text) + "\"";
      },

      class(expectation) {
        const escapedParts = expectation.parts.map(
          part => (Array.isArray(part)
            ? classEscape(part[0]) + "-" + classEscape(part[1])
            : classEscape(part))
        );

        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

      any() {
        return "any character";
      },

      end() {
        return "end of input";
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = expected.map(describeExpectation);
      descriptions.sort();

      if (descriptions.length > 0) {
        let j = 1;
        for (let i = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  const peg$FAILED = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions = {
    start: peg$parsestart,
  };
  let peg$startRuleFunction = peg$parsestart;

  const peg$c0 = "[";
  const peg$c1 = "]";
  const peg$c2 = ":";
  const peg$c3 = "[ignore]";
  const peg$c4 = "[/ignore]";
  const peg$c5 = "[/";
  const peg$c6 = "[if:";
  const peg$c7 = "[/if]";
  const peg$c8 = "(";
  const peg$c9 = ")";
  const peg$c10 = "\"";
  const peg$c11 = "'";
  const peg$c12 = ".";
  const peg$c13 = "true";
  const peg$c14 = "false";
  const peg$c15 = "\\";
  const peg$c16 = "!";
  const peg$c17 = "||";
  const peg$c18 = "&&";
  const peg$c19 = "===";
  const peg$c20 = "==";
  const peg$c21 = "!==";
  const peg$c22 = "!=";
  const peg$c23 = "<=";
  const peg$c24 = ">=";
  const peg$c25 = "null";
  const peg$c26 = "undefined";
  const peg$c27 = "using";
  const peg$c28 = "=";
  const peg$c29 = "[else:";
  const peg$c30 = "[else]";

  const peg$r0 = /^[a-zA-Z0-9._]/;
  const peg$r1 = /^[\/.]/;
  const peg$r2 = /^[, ]/;
  const peg$r3 = /^[^"]/;
  const peg$r4 = /^[^']/;
  const peg$r5 = /^[a-zA-Z_]/;
  const peg$r6 = /^[a-zA-Z0-9_]/;
  const peg$r7 = /^[0-9]/;
  const peg$r8 = /^[[\]]/;
  const peg$r9 = /^[^[\]]/;
  const peg$r10 = /^[ \t\n\r]/;
  const peg$r11 = /^[\t\n\r]/;
  const peg$r12 = /^[<>]/;
  const peg$r13 = /^[a-zA-Z0-9'.]/;
  const peg$r14 = /^[#\--.]/;
  const peg$r15 = /^[a-zA-Z0-9\-_.]/;

  const peg$e0 = peg$otherExpectation("Start");
  const peg$e1 = peg$otherExpectation("Expression");
  const peg$e2 = peg$otherExpectation("Merge Tag");
  const peg$e3 = peg$otherExpectation("Merge Identifier");
  const peg$e4 = peg$literalExpectation("[", false);
  const peg$e5 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], ".", "_"], false, false, false);
  const peg$e6 = peg$literalExpectation("]", false);
  const peg$e7 = peg$literalExpectation(":", false);
  const peg$e8 = peg$otherExpectation("Single Tag");
  const peg$e9 = peg$otherExpectation("Malformed Matches");
  const peg$e10 = peg$otherExpectation("Container Signatures");
  const peg$e11 = peg$literalExpectation("[ignore]", false);
  const peg$e12 = peg$literalExpectation("[/ignore]", false);
  const peg$e13 = peg$anyExpectation();
  const peg$e14 = peg$literalExpectation("[/", false);
  const peg$e15 = peg$literalExpectation("[if:", false);
  const peg$e16 = peg$literalExpectation("[/if]", false);
  const peg$e17 = peg$classExpectation(["/", "."], false, false, false);
  const peg$e18 = peg$otherExpectation("Container Tag");
  const peg$e19 = peg$literalExpectation("(", false);
  const peg$e20 = peg$literalExpectation(")", false);
  const peg$e21 = peg$classExpectation([",", " "], false, false, false);
  const peg$e22 = peg$literalExpectation("\"", false);
  const peg$e23 = peg$classExpectation(["\""], true, false, false);
  const peg$e24 = peg$literalExpectation("'", false);
  const peg$e25 = peg$classExpectation(["'"], true, false, false);
  const peg$e26 = peg$literalExpectation(".", false);
  const peg$e27 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false, false);
  const peg$e28 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false, false);
  const peg$e29 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e30 = peg$otherExpectation("Number");
  const peg$e31 = peg$otherExpectation("Boolean");
  const peg$e32 = peg$literalExpectation("true", false);
  const peg$e33 = peg$literalExpectation("false", false);
  const peg$e34 = peg$literalExpectation("\\", false);
  const peg$e35 = peg$classExpectation(["[", "]"], false, false, false);
  const peg$e36 = peg$classExpectation(["[", "]"], true, false, false);
  const peg$e37 = peg$otherExpectation("Text");
  const peg$e38 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false, false);
  const peg$e39 = peg$classExpectation(["\t", "\n", "\r"], false, false, false);
  const peg$e40 = peg$otherExpectation("Condition");
  const peg$e41 = peg$literalExpectation("!", false);
  const peg$e42 = peg$literalExpectation("||", false);
  const peg$e43 = peg$literalExpectation("&&", false);
  const peg$e44 = peg$otherExpectation("Operators");
  const peg$e45 = peg$literalExpectation("===", false);
  const peg$e46 = peg$literalExpectation("==", false);
  const peg$e47 = peg$literalExpectation("!==", false);
  const peg$e48 = peg$literalExpectation("!=", false);
  const peg$e49 = peg$literalExpectation("<=", false);
  const peg$e50 = peg$literalExpectation(">=", false);
  const peg$e51 = peg$classExpectation(["<", ">"], false, false, false);
  const peg$e52 = peg$otherExpectation("Operand");
  const peg$e53 = peg$otherExpectation("Name");
  const peg$e54 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "'", "."], false, false, false);
  const peg$e55 = peg$literalExpectation("null", false);
  const peg$e56 = peg$literalExpectation("undefined", false);
  const peg$e57 = peg$otherExpectation("Using");
  const peg$e58 = peg$literalExpectation("using", false);
  const peg$e59 = peg$literalExpectation("=", false);
  const peg$e60 = peg$classExpectation(["#", ["-", "."]], false, false, false);
  const peg$e61 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_", "."], false, false, false);
  const peg$e62 = peg$literalExpectation("[else:", false);
  const peg$e63 = peg$literalExpectation("[else]", false);

  function peg$f0(tagName) {    
			// only match if it's not a container tag *and* not a reserved word such as "else"
			return !isContainer(tagName.value) 
			&& !MERGE_STOP_WORDS.has(tagName.value);
  }
  function peg$f1(tagName) {
    
    debug('TRIGGER:: MERGE', tagName)

    if(tagName.type == 'identifier') {
    	return {
    		render: _getValueFromPath(tagName.value, payload),
    		text: text()
    	}
    }

    // MAY NOT BE NEEDED IF NEXT SECTION IS FIXED.
    if(tagName.type == 'objectField') {
    	return {
    		render: tagName.value,
    		text: text()
    	}
    }

    return {
    	render: tagName.value.value, // FIX THIS!!!
    	text: text()
    }

  }
  function peg$f2(tagName) {
    debug('TRIGGER :: MERGE IDENTIFIER 1', tagName.join(''))
    return { type: 'identifier', value: `${tagName.join('')}` } 
  }
  function peg$f3(tagName) {
    debug('MERGE IDENTIFIER 2', tagName)
    return tagName
  }
  function peg$f4(tagName) {    return isSingle(tagName.value)  }
  function peg$f5(tagName, content) {
    debug('SINGLE TAG', tagName)
    return { tagName, type: 'single', params: [], content, signature: 'Single Tag' }
  }
  function peg$f6(tagName) {    return isSingle(tagName.value)  }
  function peg$f7(tagName) {
    debug('SINGLE TAG WITH NO ARGS', tagName)
    return { tagName, type: 'single', params: [], content: [], signature: 'Single Tag without args' }
  }
  function peg$f8(tagName) {    return isSingle(tagName.value)  }
  function peg$f9(tagName, params, content) {
    debug('SINGLE TAG WITH PARAMS', tagName)
    return { tagName, type: 'single-with-params', params, content, signature: 'Single Tag With Params' }
  }
  function peg$f10(sig) {
    
    debug('TRIGGER :: SINGLE PROC', sig)
    
    let {tagName, type, params, content} = sig
    
    params = params.map( param => {
    	if(param.value == 'true'){ return true}
    	if(param.value == 'false'){ return false}
    	if(param?.type == 'identifier'){ return _getValueFromPath(param.value, payload)}
    	return param.value 
    })

    let cargo = processCargo(params)
    let contents = processContent(content, cargo)

    let req = {
    	name: tagName.value,
    	params: params, 
    	content: contents[0],
    	contents: contents,
    	payload: payload,
    	engine,
    	cargo: cargo
    }
    
    let render = tags[tagName.value].processor(req)
    
    return {
    	render: render,
    	text: text()
    }

  }
  function peg$f11(tagName) {    return isSingle(tagName.value)  }
  function peg$f12(tagName) {
    debug('TRIGGER :: MALFORMED MATCH', tagName)
    return {render: `ERROR: "${tagName.value}" tag expected content.`}
  }
  function peg$f13(content) {
    debug('TRIGGER :: IGNORE CONTENT')
    return {
    	tagName: {value: 'ignore'},
    	close: {value: 'ignore'},
    	params: [],
    	content: content.map(item => item[1]).join('')
    }
  }
  function peg$f14(tagName) {    return isContainer(tagName.value)  }
  function peg$f15(tagName, params, close) {
    debug('TRIGGER :: CONTAINER WITHOUT CONTENT', tagName)
    return { tagName, close, params, content: [] }
  }
  function peg$f16(cond, content, elseIfBranches, elseBranches) {
    
    debug('TRIGGER :: CONTAINER', 'IF')
    debug('TRIGGER :: CONTAINER WITH ARGS › PARAMS', cond)
    
    let chosen = null
    let params = [{ type: 'condition', value: false, default: true }]
    
    debug('TRIGGER :: CONTAINER › ELSEBRANCHES', elseBranches)
    
    let lastElse = elseBranches.length > 0 ? elseBranches[elseBranches.length - 1] : null;
    
    debug('TRIGGER :: CONTAINER › LAST ELSE', lastElse)
    
    
    // Determine which branch to render
    if (cond[0]?.value) {
    	chosen = content
    	//chosen = content.splice(1)
    	params = cond
    	debug('TRIGGER :: CONTAINER › IF IS TRUE', cond)
    	debug('TRIGGER :: CONTAINER › IF IS TRUE CONTENT', chosen)
    } else {
    	for (const b of elseIfBranches) {
    		if (b.condition[0]?.value) {
    			chosen = b.content
    			params = b.params
    			//chosen = b
    			break
    		}
    	}
    }
    
    if (!chosen && lastElse) {
    	chosen = lastElse.content
    	params = [{ type: 'condition', value: true }]
    }
    
    
    debug('TRIGGER :: CONTAINER › IF STATEMENT CONTENT', chosen)
    
    return {
    	tagName: { type: 'identifier', value: 'if' },
    	close: { type: 'identifier', value: 'if' },
    	params: params,
    	content: chosen
    }
    
  }
  function peg$f17(tagName) {    return isContainer(tagName.value)  }
  function peg$f18(tagName, params, content, close) {
    debug('TRIGGER :: CONTAINER WITH ARGS', tagName)
    debug('TRIGGER :: CONTAINER WITH ARGS › PARAMS', params)
    return { tagName, close, params, content }
  }
  function peg$f19(tagName) {    return isContainer(tagName.value)  }
  function peg$f20(tagName, params) {
    debug('TRIGGER :: CONTAINER › SELF CLOSING › WITH ARGS', tagName)
    return { 
    	tagName, 
    	close: {type: 'identifier', value: tagName.value}, 
    	params,
    	content: [{type: 'string', value: ''}]
    }
    
  }
  function peg$f21(tagName) {    return isContainer(tagName.value)  }
  function peg$f22(tagName, params, content, close) {
    debug('TRIGGER :: CONTAINER WITHOUT COLON, WITH ARGS', tagName)
    debug('TRIGGER :: CONTAINER WITHOUT COLON, WITH ARGS › CONTENT', content)
    //return { tagName, close, params: params || [], content }
    return { tagName, close, params: params, content }
  }
  function peg$f23(sig) {
    
    debug('TRIGGER :: CONTAINER PROC', sig)
    
    let {tagName, close, params, content} = sig
    
    if(tagName.value == 'ignore'){
    	return {render: content}
    }
    
    if (tagName.value !== close.value) {
    	throw new Error(`CONTAINER › Mismatched tags ${tagName.value} and ${close.value}`);
    }
    
    let cargo = processCargo(params)
    
    let req = {
    	name: tagName.value,
    	params: params.map( param => {
    		if(param.value == 'true'){ return true}
    		if(param.value == 'false'){ return false}
    		if(param.type == 'identifier'){ return _getValueFromPath(param, payload)}
    		if(param.type == 'objectField'){ return param.value}
    		return param 
    	}), 
    	//content:  content ? content.map(e => e.text).join('') : '',
    	content: content ? content.map(e => e.render).join('') : '',
    	//contentRaw: content || [],
    	contentRaw:  content ? content.map(e => e.text).join('') : '',
    	cargo,
    	payload,
    	engine
    }
    
    // RUN PLUGIN.
    let render = tags[tagName.value].processor(req)
    
    return {
    	render: render,
    	text: text()
    }
  }
  function peg$f24(chars) {    return { type: 'string', value: chars.join('') }  }
  function peg$f25(chars) {    return { type: 'string', value: chars.join('') }  }
  function peg$f26(func) {    return [{type: 'plugin', name: func.name, args: func.args}];  }
  function peg$f27(func) {    return [{type: 'plugin', name: func.name, args: func.args}];  }
  function peg$f28(segment) {
    let value = segment.value.split('.').map(val => {
    	return {type: 'dot', value: val}
    })
    return value
  }
  function peg$f29(segment) {
    let value = _getValueFromPath(segment.value, payload) || segment.value
    return [{ type: "bracket", value }];
  }
  function peg$f30(segment) {
    let value = _getValueFromPath(segment.value, payload) || segment.value
    return [{ type: "bracket", value }];
  }
  function peg$f31(segments) {
    return { type: "segments", segments: segments.flat() }
  }
  function peg$f32(name) {    return {type: 'plugin', name: name.value, args: []};  }
  function peg$f33(name, args) {    return {name: name.value, args};  }
  function peg$f34(obj, path) {

    /*
    let root = obj.value.split('.').map(item => {
    	return {type: 'identifier', value: item}
    })

    let segments = { type: "segments", segments: [...root, ...path.segments] };

    return {type: 'objectField', value:_getValueFromPath(segments, payload)}
    */
    
    let segments = { type: "segments", segments: [obj, ...path.segments] };
    return {type: 'objectField', value:_getValueFromPath(segments, payload)}

  }
  function peg$f35(obj, field) {
    let path = _getValueFromPath(obj, payload)
    let val = _getValueFromPath(field, payload)
    return { type: 'objectField', value: path[val]}
  }
  function peg$f36(head, tail) {    return { type: 'identifier', value: head + tail.join('') }  }
  function peg$f37(i) {    return { type: 'index', value: parseInt(i.join(''), 10) };  }
  function peg$f38(number) {    return { type: "number", value: parseInt(number.join(''), 10) }  }
  function peg$f39(boolean) {    return {type: 'boolean', value: boolean === 'true' }  }
  function peg$f40(char) {    return '\\' + char  }
  function peg$f41(chars) {    return chars.join('')  }
  function peg$f42(chars) {
    return { 
    	type: 'text', 
    	value: chars,
    	text: chars,
    	render: chars
    }
  }
  function peg$f43(left, operator, right) {
    debug(':::::::::::::::: LEFT', left)
    debug(':::::::::::::::: OPERATOR', operator)
    debug(':::::::::::::::: RIGHT', right)
    let value = _evaluateCondition({left, operator, right}, payload)
    return { type: "condition", value: value }
  }
  function peg$f44(neg, op) {
    op.neg = true
//		if(op.type !== 'boolean'){ op.value = _getValueFromPath(op.value, payload) }
    op.value = !op.value
    op.type = 'condition'
    return op
  }
  function peg$f45(left, right) {
    return { type: "condition", value: left.value || right.value };
  }
  function peg$f46(left, right) {
    return { type: "condition", value: left.value && right.value };
  }
  function peg$f47(expr) {    return expr;  }
  function peg$f48(name) {return { type: "name", value: name}  }
  function peg$f49() {    return { type: 'null', value: null }  }
  function peg$f50() {    return { type: 'undefined', value: undefined }  }
  function peg$f51(name, value) {
    return {
    	type: "using", 
    	name: name.value,
    	value: _getValueFromPath(value.value, payload) || value.value
    }
  }
  function peg$f52(key, value) {
    return { type: "attribute", key, value: value.value }
  }
  function peg$f53(prefix, name) {
    let type;
    switch (prefix) {
    	case ".": type = "classes"; break;
    	case "#": type = "id"; break;
    	case "-": type = "flag"; break;
    }
    return { type, value: name }
  }
  function peg$f54(cond, expr) {    return expr;  }
  function peg$f55(cond, body) {
    return { params: cond, condition: cond, content: body };
  }
  function peg$f56(expr) {    return expr;  }
  function peg$f57(body) {    
    	return { content: body };
  }
  let peg$currPos = options.peg$currPos | 0;
  let peg$savedPos = peg$currPos;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = peg$currPos;
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
  let peg$silentFails = options.peg$silentFails | 0;

  let peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$getUnicode(pos = peg$currPos) {
    const cp = input.codePointAt(pos);
    if (cp === undefined) {
      return "";
    }
    return String.fromCodePoint(cp);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text, ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description };
  }

  function peg$computePosDetails(pos) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    const res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseexpression();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseexpression();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseexpression() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsetext();
    if (s1 !== peg$FAILED) {
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsetag();
      if (s1 !== peg$FAILED) {
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsemal();
        if (s1 !== peg$FAILED) {
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecontainerTag();
          if (s1 !== peg$FAILED) {
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsemerge();
            if (s1 !== peg$FAILED) {
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parsemerge() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsemerge_identifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f0(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parsemerge_identifier() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r0.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r0.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c1;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s5 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f2(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c0;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        s3 = peg$parseobjectField();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c1;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f3(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }

    return s0;
  }

  function peg$parsesingle_signatures() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$f4(s2);
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            s6 = peg$parsearguments();
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s8 = peg$c1;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s8 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f5(s2, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c0;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$f6(s2);
          if (s3) {
            s3 = undefined;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c1;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f7(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s3 = peg$f8(s2);
            if (s3) {
              s3 = undefined;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseparameters();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s5 = peg$c2;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parseobjectField();
                  if (s7 === peg$FAILED) {
                    s7 = peg$parsearguments();
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s8 = peg$c1;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e6); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f9(s2, s4, s7);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsetag() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsesingle_signatures();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parsemal() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$f11(s2);
        if (s3) {
          s3 = undefined;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c2;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e7); }
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c1;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f12(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parsecontainer_signatures() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c3) {
      s1 = peg$c3;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 9) === peg$c4) {
        s5 = peg$c4;
        peg$currPos += 9;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = undefined;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 9) === peg$c4) {
          s5 = peg$c4;
          peg$currPos += 9;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = undefined;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (input.substr(peg$currPos, 9) === peg$c4) {
        s3 = peg$c4;
        peg$currPos += 9;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c0;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseidentifier();
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s3 = peg$f14(s2);
          if (s3) {
            s3 = undefined;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c2;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e7); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              s6 = peg$parsearguments();
              s7 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 93) {
                s8 = peg$c1;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parse_();
                if (input.substr(peg$currPos, 2) === peg$c5) {
                  s10 = peg$c5;
                  peg$currPos += 2;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parseidentifier();
                  if (s11 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s12 = peg$c1;
                      peg$currPos++;
                    } else {
                      s12 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e6); }
                    }
                    if (s12 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f15(s2, s6, s11);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c6) {
          s1 = peg$c6;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e15); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          s3 = peg$parseifArguments();
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c1;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e6); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = [];
            s8 = peg$parseexpression();
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              s8 = peg$parseexpression();
            }
            s8 = [];
            s9 = peg$parseElseIfBranch();
            while (s9 !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parseElseIfBranch();
            }
            s9 = [];
            s10 = peg$parseElseBranch();
            while (s10 !== peg$FAILED) {
              s9.push(s10);
              s10 = peg$parseElseBranch();
            }
            if (input.substr(peg$currPos, 5) === peg$c7) {
              s10 = peg$c7;
              peg$currPos += 5;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f16(s3, s7, s8, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c0;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseidentifier();
            if (s2 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s3 = peg$f17(s2);
              if (s3) {
                s3 = undefined;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s4 = peg$c2;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e7); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  s6 = peg$parsearguments();
                  s7 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s8 = peg$c1;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e6); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsenl();
                    s10 = [];
                    s11 = peg$parseexpression();
                    while (s11 !== peg$FAILED) {
                      s10.push(s11);
                      s11 = peg$parseexpression();
                    }
                    if (input.substr(peg$currPos, 2) === peg$c5) {
                      s11 = peg$c5;
                      peg$currPos += 2;
                    } else {
                      s11 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e14); }
                    }
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseidentifier();
                      if (s12 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 93) {
                          s13 = peg$c1;
                          peg$currPos++;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e6); }
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parsenl();
                          peg$savedPos = s0;
                          s0 = peg$f18(s2, s6, s10, s12);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c0;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseidentifier();
              if (s2 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s3 = peg$f19(s2);
                if (s3) {
                  s3 = undefined;
                } else {
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s4 = peg$c2;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e7); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse_();
                    s6 = peg$parsearguments();
                    s7 = peg$parse_();
                    s8 = input.charAt(peg$currPos);
                    if (peg$r1.test(s8)) {
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e17); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 93) {
                        s10 = peg$c1;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e6); }
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f20(s2, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c0;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e4); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parseidentifier();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s3 = peg$f21(s2);
                  if (s3) {
                    s3 = undefined;
                  } else {
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    s5 = peg$parsearguments();
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s6 = peg$c1;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e6); }
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parsenl();
                      s8 = [];
                      s9 = peg$parseexpression();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseexpression();
                      }
                      if (input.substr(peg$currPos, 2) === peg$c5) {
                        s9 = peg$c5;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e14); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseidentifier();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 93) {
                            s11 = peg$c1;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e6); }
                          }
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsenl();
                            peg$savedPos = s0;
                            s0 = peg$f22(s2, s5, s8, s10);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parsecontainerTag() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecontainer_signatures();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseparameters() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsearguments();
      if (input.charCodeAt(peg$currPos) === 41) {
        s3 = peg$c9;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s3 !== peg$FAILED) {
        s0 = s2;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c9;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsearguments() {
    let s0, s1, s2;

    s0 = [];
    s1 = peg$parsearg();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parsedelimiter();
      if (s2 !== peg$FAILED) {
        s2 = peg$parsearg();
        if (s2 === peg$FAILED) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
      } else {
        s1 = s2;
      }
    }

    return s0;
  }

  function peg$parseifArguments() {
    let s0, s1, s2;

    s0 = [];
    s1 = peg$parselogicalOrExpression();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parsedelimiter();
      if (s2 !== peg$FAILED) {
        s2 = peg$parselogicalOrExpression();
        if (s2 === peg$FAILED) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
      } else {
        s1 = s2;
      }
    }

    return s0;
  }

  function peg$parsedelimiter() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = input.charAt(peg$currPos);
    if (peg$r2.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearg() {
    let s0;

    s0 = peg$parseattribute();
    if (s0 === peg$FAILED) {
      s0 = peg$parsequotedText();
      if (s0 === peg$FAILED) {
        s0 = peg$parseusingPattern();
        if (s0 === peg$FAILED) {
          s0 = peg$parseboolean();
          if (s0 === peg$FAILED) {
            s0 = peg$parseobjectField();
            if (s0 === peg$FAILED) {
              s0 = peg$parseidentifier();
              if (s0 === peg$FAILED) {
                s0 = peg$parseindex();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsenumber();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsenullLiteral();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseundefinedLiteral();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsequotedText() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c10;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r3.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r3.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c10;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f24(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c11;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = input.charAt(peg$currPos);
        if (peg$r4.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r4.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c11;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsepathSegment() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c12;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepluginCall();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f26(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsepluginCall();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f27(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f28(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseidentifier();
          if (s1 === peg$FAILED) {
            s1 = peg$parsequotedText();
            if (s1 === peg$FAILED) {
              s1 = peg$parsenumber();
            }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f29(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c0;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseidentifier();
              if (s2 === peg$FAILED) {
                s2 = peg$parsequotedText();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsenumber();
                }
              }
              if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s3 = peg$c1;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e6); }
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f30(s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsepath() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsepathSegment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsepathSegment();
    }
    peg$savedPos = s0;
    s1 = peg$f31(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsepluginCall() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f32(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsearguments();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c9;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e20); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f33(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseobjectField() {
    let s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsepath();
      peg$savedPos = s0;
      s0 = peg$f34(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseidentifier();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s2 = peg$c0;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseidentifier();
          if (s3 === peg$FAILED) {
            s3 = peg$parsequotedText();
            if (s3 === peg$FAILED) {
              s3 = peg$parsenumber();
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s4 = peg$c1;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e6); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f35(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseidentifier() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r5.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r6.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e28); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r6.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f36(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindex() {
    let s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = input.charAt(peg$currPos);
      if (peg$r7.test(s3)) {
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = input.charAt(peg$currPos);
          if (peg$r7.test(s3)) {
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c1;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f37(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    let s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r7.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r7.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f38(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }

    return s0;
  }

  function peg$parseboolean() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c13) {
      s1 = peg$c13;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c14) {
        s1 = peg$c14;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e33); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f39(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseescapedChar() {
    let s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r8.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f40(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecharSequence() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseescapedChar();
    if (s2 === peg$FAILED) {
      s2 = input.charAt(peg$currPos);
      if (peg$r9.test(s2)) {
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseescapedChar();
        if (s2 === peg$FAILED) {
          s2 = input.charAt(peg$currPos);
          if (peg$r9.test(s2)) {
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e36); }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetext() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsecharSequence();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }

    return s0;
  }

  function peg$parse_() {
    let s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r10.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r10.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsenl() {
    let s0;

    peg$silentFails++;
    s0 = input.charAt(peg$currPos);
    if (peg$r11.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }
    peg$silentFails--;

    return s0;
  }

  function peg$parsecondition() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseoperand();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseoperators();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseoperand();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoperand();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f44(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parselogicalOrExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parselogicalAndExpression();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c17) {
        s3 = peg$c17;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parselogicalOrExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f45(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parselogicalAndExpression();
    }

    return s0;
  }

  function peg$parselogicalAndExpression() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parselogicalTerm();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s3 = peg$c18;
        peg$currPos += 2;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parselogicalAndExpression();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f46(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parselogicalTerm();
    }

    return s0;
  }

  function peg$parselogicalTerm() {
    let s0;

    s0 = peg$parseparenExpr();
    if (s0 === peg$FAILED) {
      s0 = peg$parsecondition();
      if (s0 === peg$FAILED) {
        s0 = peg$parseoperand();
      }
    }

    return s0;
  }

  function peg$parseparenExpr() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parselogicalOrExpression();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 41) {
          s5 = peg$c9;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f47(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoperators() {
    let s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 3) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c21) {
          s0 = peg$c21;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e47); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c22) {
            s0 = peg$c22;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e48); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c23) {
              s0 = peg$c23;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e49); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c24) {
                s0 = peg$c24;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e50); }
              }
              if (s0 === peg$FAILED) {
                s0 = input.charAt(peg$currPos);
                if (peg$r12.test(s0)) {
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e51); }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parseoperand() {
    let s0, s1;

    peg$silentFails++;
    s0 = peg$parsequotedText();
    if (s0 === peg$FAILED) {
      s0 = peg$parseboolean();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parseobjectField();
          if (s0 === peg$FAILED) {
            s0 = peg$parsename();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e52); }
    }

    return s0;
  }

  function peg$parsename() {
    let s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r13.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r13.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e54); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }

    return s0;
  }

  function peg$parsenullLiteral() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c25) {
      s1 = peg$c25;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e55); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f49();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseundefinedLiteral() {
    let s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c26) {
      s1 = peg$c26;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e56); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f50();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseusingPattern() {
    let s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsequotedText();
    if (s1 === peg$FAILED) {
      s1 = peg$parsename();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.substr(peg$currPos, 5) === peg$c27) {
        s3 = peg$c27;
        peg$currPos += 5;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseoperand();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f51(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }

    return s0;
  }

  function peg$parseattribute() {
    let s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseattrKey();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c28;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseobjectField();
        if (s5 === peg$FAILED) {
          s5 = peg$parsequotedText();
          if (s5 === peg$FAILED) {
            s5 = peg$parsetext();
          }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f52(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseprefixPattern();
    }

    return s0;
  }

  function peg$parseprefixPattern() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = input.charAt(peg$currPos);
    if (peg$r14.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseattrKey();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f53(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseattrKey() {
    let s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r15.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r15.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseElseIfBranch() {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c29) {
      s1 = peg$c29;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e62); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseifArguments();
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s5 = peg$c1;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parsenl();
        s7 = [];
        s8 = peg$currPos;
        s9 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 6) === peg$c29) {
          s10 = peg$c29;
          peg$currPos += 6;
        } else {
          s10 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
        if (s10 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c30) {
            s10 = peg$c30;
            peg$currPos += 6;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e63); }
          }
          if (s10 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c7) {
              s10 = peg$c7;
              peg$currPos += 5;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
          }
        }
        peg$silentFails--;
        if (s10 === peg$FAILED) {
          s9 = undefined;
        } else {
          peg$currPos = s9;
          s9 = peg$FAILED;
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parseexpression();
          if (s10 !== peg$FAILED) {
            peg$savedPos = s8;
            s8 = peg$f54(s3, s10);
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$currPos;
          s9 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 6) === peg$c29) {
            s10 = peg$c29;
            peg$currPos += 6;
          } else {
            s10 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e62); }
          }
          if (s10 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c30) {
              s10 = peg$c30;
              peg$currPos += 6;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e63); }
            }
            if (s10 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c7) {
                s10 = peg$c7;
                peg$currPos += 5;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e16); }
              }
            }
          }
          peg$silentFails--;
          if (s10 === peg$FAILED) {
            s9 = undefined;
          } else {
            peg$currPos = s9;
            s9 = peg$FAILED;
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parseexpression();
            if (s10 !== peg$FAILED) {
              peg$savedPos = s8;
              s8 = peg$f54(s3, s10);
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
        }
        peg$savedPos = s0;
        s0 = peg$f55(s3, s7);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseElseBranch() {
    let s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$currPos;
      s5 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 6) === peg$c29) {
        s6 = peg$c29;
        peg$currPos += 6;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e62); }
      }
      if (s6 === peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c29) {
          s6 = peg$c29;
          peg$currPos += 6;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
        if (s6 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c7) {
            s6 = peg$c7;
            peg$currPos += 5;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e16); }
          }
        }
      }
      peg$silentFails--;
      if (s6 === peg$FAILED) {
        s5 = undefined;
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parseexpression();
        if (s6 !== peg$FAILED) {
          peg$savedPos = s4;
          s4 = peg$f56(s6);
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 6) === peg$c29) {
          s6 = peg$c29;
          peg$currPos += 6;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
        if (s6 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c29) {
            s6 = peg$c29;
            peg$currPos += 6;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e62); }
          }
          if (s6 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c7) {
              s6 = peg$c7;
              peg$currPos += 5;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e16); }
            }
          }
        }
        peg$silentFails--;
        if (s6 === peg$FAILED) {
          s5 = undefined;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseexpression();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s4;
            s4 = peg$f56(s6);
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f57(s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }



	var { DEBUG, engine, payload, tags } = options

	const MERGE_STOP_WORDS = new Set(['else'])
	
	function isSingle(tag) {
		if(MERGE_STOP_WORDS.has(tag)) return false
		let theTag = options.tags?.[tag]
		if(!theTag) return false
		return theTag.kind ? theTag.kind === 'single' : true
	}
	
	function isContainer(tag) {
		return options.tags?.[tag]?.kind === 'container'
	}
	
	function debug(title, message){
		if (DEBUG) console.log(`DEBUG › ${title} ›`, message)
	}

	function processContent(content, cargo) {

		let contents = Array.isArray(content) ? content : [content];
		let out = []
		contents = contents.map(item => {
			switch (item.type) {
				case 'attribute':
					return ''
				//	return item
				case 'flag':
					cargo.flags.push(item.value)
				case 'null':
					return null
				case 'undefined':
					return undefined
				case 'identifier':
					return _getValueFromPath(item.value, payload)
				default:
					return item.value
			}
		})

		if(Array.isArray(content)){

			content?.forEach( param => {
					if(param.type == 'attribute'){
						param.value = _getValueFromPath(param.value, payload) || param.value
					cargo.assignment[param.key] = param.value
					cargo.attributes[param.key] = param.value
				}
				if(param.type == 'using'){ cargo.using = param}
			})
		}

		contents = contents.filter(Boolean) // REMOVE FALSY
		return contents

	}

	function _getValueFromPath(item, payload) {
		
		if (!item) return ''
		
		// If item is already a raw value (number, boolean), return as is
		if (
			typeof item === 'number' ||
			typeof item === 'boolean' ||
			item === null ||
			item === undefined
		) {
			return item
		}
		
		// Accept either a segments object or a string (legacy)
		let segments = item
		
		if (item.type === 'segments') {
			segments = item.segments
		} else if (typeof item === 'string') {
			// Fallback: handle as dot-path
			return item.split('.').reduce((obj, key) => obj?.[key], payload)
		} else {
			return item.value || ''
		}
		
		let value = payload
		
		for (let segment of segments) {
			
			if (segment.type === 'identifier' || segment.type === 'dot') {
				value = value?.[segment.value]
			}
			else if (segment.type === 'plugin') {
				
				const plugin = tags[segment.name]
				
				// ON INVALID PLUGIN
				if (!plugin || typeof plugin.processor !== 'function') {
					debug('PLUGIN NOT FOUND', `Plugin "${segment.name}" not found or invalid—skipped.`)
					continue
				}
				
				// ON NOT FOUND IN SINLGE, ASSUME CONTAINER AND SKIP.
				if (!isSingle(segment.name)) {
					debug('PLUGIN SKIPPED', `Plugin "${segment.name}" is a container and was skipped in value chain.`)
					continue
				}
				value = plugin.processor({
					content: value,
					payload,
					params: segment.args?.map(a => a.value !== undefined ? a.value : a)
				})
			}
			else if (segment.type === 'bracket') {
				value = value?.[segment.value]
			}
			
		}
		
		return value
	}
	
	function _evaluateCondition(condition, payload) {
		
		let { left, operator, right} = condition
		
		const leftValue = _getValueFromPath(left.value, payload)
		left = (leftValue !== undefined) ? leftValue : left.value
		
		const rightValue = _getValueFromPath(right.value, payload)
		right = (rightValue !== undefined) ? rightValue : right.value
		
		debug('_EVALUATECONDITION() :: TRUTHY TEST', {left, operator, right})
		
		// CATCH TRUTHY VALUES.
		if (left && !operator && !right) return true;
		
		const OPS = {
			'=='  : (l, r) => l == r,
			'===' : (l, r) => l === r,
			'!='  : (l, r) => l != r,
			'!==' : (l, r) => l !== r,
			'<'   : (l, r) => l < r,
			'>'   : (l, r) => l > r,
			'<='  : (l, r) => l <= r,
			'>='  : (l, r) => l >= r,
		}
		
		if (operator in OPS) return OPS[operator](left, right)
		
		// Default fallback for unknown operators
		return false;
		
	}

	function processCargo(params) {
		
		let cargo = {
			assignment: {},
			attributes: {},
			flags: [],
			classes: [],
			condition: null,
			extra: [],
			id: '',
			params: [],
			using: null,
			values: []
		}

		if(params.length == 0){
			return cargo
		}

		params = Array.isArray(params) ? params : [params];

		params.forEach(param => {

			if(!param){ return undefined }

			switch (param.type) {
				case 'attribute':   cargo.attributes[param.key] = param.value; break;
				case 'boolean':     cargo.values.push(param.value); break;
				case 'classes':     cargo.classes.push(param.value); break;
				case 'condition':   cargo.condition = param.value; break;
				case 'id':          cargo.id = param.value; break;
				case 'identifier':  cargo.values.push(_getValueFromPath(param, payload)); break;
				case 'flag':        cargo.flags.push(param.value); break;
				case 'objectField': cargo.params.push(param.value); break;
				case 'null':        cargo.params.push(null); break;
				case 'number':      cargo.values.push(param.value); break;
				case 'string':      cargo.values.push(param.value); break;
				case 'undefined':   cargo.params.push(undefined); break;
				case 'using':       cargo.using = param; break;
				default:            cargo.extra.push(param);
			}
		})

		return cargo

	}


  peg$result = peg$startRuleFunction();

  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
  function peg$throw() {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos,
      peg$success,
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
  if (peg$success) {
    return peg$result;
  } else {
    peg$throw();
  }
}

const peg$allowedStartRules = [
  "start"
];

export {
  peg$allowedStartRules as StartRules,
  peg$SyntaxError as SyntaxError,
  peg$parse as parse
};
